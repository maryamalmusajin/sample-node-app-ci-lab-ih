name: new vm
on:
  workflow_dispatch:

permissions:
  contents: read
  actions: read
  checks: write
  pull-requests: write
  id-token: write

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    environment: dev

    steps:
      - name: Checkout code
        uses: actions/checkout@v5
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4.4.0
        with:
          node-version: 22.x
          cache: npm
          cache-dependency-path: package-lock.json

      - name: Install dependencies
        run: npm ci

      - name: Run tests (optional)
        run: |
          npm test || echo "Tests skipped"

      # -------------------------------
      # Create Deployment Package
      # -------------------------------
      - name: Create deployment package
        run: |
          set -euo pipefail
          STAGING="$GITHUB_WORKSPACE/deployment-package"
          rm -rf "$STAGING"
          mkdir -p "$STAGING"

          echo "Copying project files..."
          rsync -av --exclude='.git' --exclude='.github' --exclude='coverage' --exclude='node_modules' ./ "$STAGING/"

          echo "Installing production dependencies..."
          (cd "$STAGING" && npm ci --omit=dev)

          TS="$(date +%Y%m%d-%H%M%S)"
          SHORT_SHA="${GITHUB_SHA::7}"
          ZIP_NAME="deployment-package-${SHORT_SHA}-${TS}.zip"
          (cd "$GITHUB_WORKSPACE" && zip -r "$ZIP_NAME" "deployment-package")
          echo "ZIP_NAME=$ZIP_NAME" >> "$GITHUB_ENV"

      - name: Azure login (client secret)
        uses: azure/login@v2
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      # -------------------------------
      # Upload Package to Azure Blob
      # -------------------------------
      - name: Upload package to Blob
        uses: azure/cli@v2.1.0
        env:
          ZIP_NAME: ${{ env.ZIP_NAME }}
          AZ_STORAGE_ACCOUNT: ${{ secrets.AZ_STORAGE_ACCOUNT }}
          AZ_STORAGE_CONTAINER: ${{ secrets.AZ_STORAGE_CONTAINER }}
          AZ_STORAGE_KEY: ${{ secrets.AZ_STORAGE_KEY }}
        with:
          inlineScript: |
            set -euo pipefail
            AZ_STORAGE_KEY="$(printf %s "$AZ_STORAGE_KEY" | tr -d '\r\n')"
            export AZ_STORAGE_KEY

            az storage container create \
              --name "$AZ_STORAGE_CONTAINER" \
              --account-name "$AZ_STORAGE_ACCOUNT" \
              --account-key "$AZ_STORAGE_KEY" \
              --only-show-errors 1>/dev/null

            echo "Uploading $ZIP_NAME..."
            az storage blob upload \
              --account-name "$AZ_STORAGE_ACCOUNT" \
              --account-key "$AZ_STORAGE_KEY" \
              --container-name "$AZ_STORAGE_CONTAINER" \
              --file "$ZIP_NAME" \
              --name "$ZIP_NAME" \
              --overwrite true \
              --only-show-errors

            SAS=$(az storage blob generate-sas \
              --account-name "$AZ_STORAGE_ACCOUNT" \
              --account-key "$AZ_STORAGE_KEY" \
              --container-name "$AZ_STORAGE_CONTAINER" \
              --name "$ZIP_NAME" \
              --permissions r \
              --expiry "$(date -u -d '+1 hour' '+%Y-%m-%dT%H:%MZ')" \
              --https-only --full-uri -o tsv)

            echo "::add-mask::$SAS"
            echo "PACKAGE_SAS_URL=$SAS" >> "$GITHUB_ENV"

      # -------------------------------
      # Create and Run Deploy Script on VM
      # -------------------------------
      - name: Create and run deployment script on VM
        uses: azure/cli@v2.1.0
        env:
          AZURE_RESOURCE_GROUP: ${{ secrets.AZURE_RESOURCE_GROUP }}
          AZURE_VM_NAME: ${{ secrets.AZURE_VM_NAME }}
          PACKAGE_SAS_URL: ${{ env.PACKAGE_SAS_URL }}
        with:
          inlineScript: |
            echo "Uploading and executing deployment script on VM..."

            az vm run-command invoke \
              --resource-group "$AZURE_RESOURCE_GROUP" \
              --name "$AZURE_VM_NAME" \
              --command-id RunShellScript \
              --scripts '
                set -e
                APP_DIR="/opt/myapp"
                APP_NAME="myapp"
                APP_USER="azureuser"
                PACKAGE_URL="${PACKAGE_SAS_URL}"

                echo "Installing dependencies (unzip, curl, rsync)..."
                sudo apt-get update -y
                sudo apt-get install -y unzip curl rsync

                echo "Preparing directories..."
                sudo mkdir -p "$APP_DIR/releases" "$APP_DIR/current"

                echo "Downloading deployment package..."
                curl -fSL "$PACKAGE_URL" -o /tmp/app.zip

                RELEASE_DIR="$APP_DIR/releases/$(date +%Y%m%d-%H%M%S)"
                sudo mkdir -p "$RELEASE_DIR"

                echo "Extracting package..."
                sudo unzip -o /tmp/app.zip -d "$RELEASE_DIR"

                if [ -d "$RELEASE_DIR/deployment-package" ]; then
                  echo "Flattening structure..."
                  sudo rsync -av "$RELEASE_DIR/deployment-package/" "$RELEASE_DIR/"
                  sudo rm -rf "$RELEASE_DIR/deployment-package"
                fi

                echo "Verifying contents of $RELEASE_DIR"
                ls -la "$RELEASE_DIR"

                echo "Linking current release..."
                sudo rm -rf "$APP_DIR/current"
                sudo ln -sfn "$RELEASE_DIR" "$APP_DIR/current"

                echo "Installing PM2..."
                sudo npm install -g pm2

                echo "Starting app with PM2..."
                sudo -u "$APP_USER" pm2 stop "$APP_NAME" 2>/dev/null || true
                sudo -u "$APP_USER" pm2 delete "$APP_NAME" 2>/dev/null || true
                sudo -u "$APP_USER" pm2 start "$APP_DIR/current/server.js" --name "$APP_NAME" --no-daemon &
                sudo -u "$APP_USER" pm2 save

                echo "Deployment complete!"
              '

